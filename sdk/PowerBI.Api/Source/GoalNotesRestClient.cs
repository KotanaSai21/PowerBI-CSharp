// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    internal partial class GoalNotesRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Guid _groupId;
        private readonly Guid _scorecardId;
        private readonly Guid _goalId;
        private readonly DateTimeOffset _timestamp;
        private readonly Guid _noteId;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of GoalNotesRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="timestamp"> The timestamp for the value of the goal. </param>
        /// <param name="noteId"> The unique identifier of the goal check-in note. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public GoalNotesRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Guid groupId, Guid scorecardId, Guid goalId, DateTimeOffset timestamp, Guid noteId, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _groupId = groupId;
            _scorecardId = scorecardId;
            _goalId = goalId;
            _timestamp = timestamp;
            _noteId = noteId;
            _endpoint = endpoint ?? new Uri("https://api.powerbi.com");
        }

        internal HttpMessage CreatePreviewPostRequest(GoalNoteRequest goalNote)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(_groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(_scorecardId, true);
            uri.AppendPath(")/goals(", false);
            uri.AppendPath(_goalId, true);
            uri.AppendPath(")/goalValues(", false);
            uri.AppendPath(_timestamp, "D", true);
            uri.AppendPath(")/notes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue<GoalNoteRequest>(goalNote);
            request.Content = content;
            return message;
        }

        /// <summary> Adds a new note to a goal value check-in. </summary>
        /// <param name="goalNote"> The goal check-in note. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="goalNote"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<GoalNote>> PreviewPostAsync(GoalNoteRequest goalNote, CancellationToken cancellationToken = default)
        {
            if (goalNote == null)
            {
                throw new ArgumentNullException(nameof(goalNote));
            }

            using var message = CreatePreviewPostRequest(goalNote);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GoalNote value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GoalNote.DeserializeGoalNote(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Adds a new note to a goal value check-in. </summary>
        /// <param name="goalNote"> The goal check-in note. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="goalNote"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<GoalNote> PreviewPost(GoalNoteRequest goalNote, CancellationToken cancellationToken = default)
        {
            if (goalNote == null)
            {
                throw new ArgumentNullException(nameof(goalNote));
            }

            using var message = CreatePreviewPostRequest(goalNote);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GoalNote value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GoalNote.DeserializeGoalNote(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewPatchByIDRequest(GoalNoteRequest goalNote)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(_groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(_scorecardId, true);
            uri.AppendPath(")/goals(", false);
            uri.AppendPath(_goalId, true);
            uri.AppendPath(")/goalValues(", false);
            uri.AppendPath(_timestamp, "D", true);
            uri.AppendPath(")/notes(", false);
            uri.AppendPath(_noteId, true);
            uri.AppendPath(")", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue<GoalNoteRequest>(goalNote);
            request.Content = content;
            return message;
        }

        /// <summary> Updates a goal value check-in note by ID. </summary>
        /// <param name="goalNote"> The note content to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="goalNote"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<GoalNote>> PreviewPatchByIDAsync(GoalNoteRequest goalNote, CancellationToken cancellationToken = default)
        {
            if (goalNote == null)
            {
                throw new ArgumentNullException(nameof(goalNote));
            }

            using var message = CreatePreviewPatchByIDRequest(goalNote);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GoalNote value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GoalNote.DeserializeGoalNote(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates a goal value check-in note by ID. </summary>
        /// <param name="goalNote"> The note content to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="goalNote"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<GoalNote> PreviewPatchByID(GoalNoteRequest goalNote, CancellationToken cancellationToken = default)
        {
            if (goalNote == null)
            {
                throw new ArgumentNullException(nameof(goalNote));
            }

            using var message = CreatePreviewPatchByIDRequest(goalNote);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GoalNote value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GoalNote.DeserializeGoalNote(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewDeleteByIDRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(_groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(_scorecardId, true);
            uri.AppendPath(")/goals(", false);
            uri.AppendPath(_goalId, true);
            uri.AppendPath(")/goalValues(", false);
            uri.AppendPath(_timestamp, "D", true);
            uri.AppendPath(")/notes(", false);
            uri.AppendPath(_noteId, true);
            uri.AppendPath(")", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes a goal value check-in note by ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> PreviewDeleteByIDAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewDeleteByIDRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes a goal value check-in note by ID. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response PreviewDeleteByID(CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewDeleteByIDRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
