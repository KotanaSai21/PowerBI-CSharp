// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class AdminGroup : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(IsReadOnly))
            {
                writer.WritePropertyName("isReadOnly"u8);
                writer.WriteBooleanValue(IsReadOnly.Value);
            }
            if (Optional.IsDefined(IsOnDedicatedCapacity))
            {
                writer.WritePropertyName("isOnDedicatedCapacity"u8);
                writer.WriteBooleanValue(IsOnDedicatedCapacity.Value);
            }
            if (Optional.IsDefined(CapacityId))
            {
                writer.WritePropertyName("capacityId"u8);
                writer.WriteStringValue(CapacityId.Value);
            }
            if (Optional.IsDefined(DataflowStorageId))
            {
                writer.WritePropertyName("dataflowStorageId"u8);
                writer.WriteStringValue(DataflowStorageId.Value);
            }
            if (Optional.IsDefined(DefaultDatasetStorageFormat))
            {
                writer.WritePropertyName("defaultDatasetStorageFormat"u8);
                writer.WriteStringValue(DefaultDatasetStorageFormat.Value.ToString());
            }
            if (Optional.IsDefined(LogAnalyticsWorkspace))
            {
                writer.WritePropertyName("logAnalyticsWorkspace"u8);
                writer.WriteObjectValue(LogAnalyticsWorkspace);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Type))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(Type.Value.ToSerialString());
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State);
            }
            if (Optional.IsCollectionDefined(Users))
            {
                writer.WritePropertyName("users"u8);
                writer.WriteStartArray();
                foreach (var item in Users)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Reports))
            {
                writer.WritePropertyName("reports"u8);
                writer.WriteStartArray();
                foreach (var item in Reports)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Dashboards))
            {
                writer.WritePropertyName("dashboards"u8);
                writer.WriteStartArray();
                foreach (var item in Dashboards)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Datasets))
            {
                writer.WritePropertyName("datasets"u8);
                writer.WriteStartArray();
                foreach (var item in Datasets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Dataflows))
            {
                writer.WritePropertyName("dataflows"u8);
                writer.WriteStartArray();
                foreach (var item in Dataflows)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Workbooks))
            {
                writer.WritePropertyName("workbooks"u8);
                writer.WriteStartArray();
                foreach (var item in Workbooks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PipelineId))
            {
                writer.WritePropertyName("pipelineId"u8);
                writer.WriteStringValue(PipelineId.Value);
            }
            if (Optional.IsDefined(HasWorkspaceLevelSettings))
            {
                writer.WritePropertyName("hasWorkspaceLevelSettings"u8);
                writer.WriteBooleanValue(HasWorkspaceLevelSettings.Value);
            }
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            writer.WriteEndObject();
        }

        internal static AdminGroup DeserializeAdminGroup(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> isReadOnly = default;
            Optional<bool> isOnDedicatedCapacity = default;
            Optional<Guid> capacityId = default;
            Optional<Guid> dataflowStorageId = default;
            Optional<DefaultDatasetStorageFormat> defaultDatasetStorageFormat = default;
            Optional<AzureResource> logAnalyticsWorkspace = default;
            Optional<string> description = default;
            Optional<GroupType> type = default;
            Optional<string> state = default;
            Optional<IList<GroupUser>> users = default;
            Optional<IList<AdminReport>> reports = default;
            Optional<IList<AdminDashboard>> dashboards = default;
            Optional<IList<AdminDataset>> datasets = default;
            Optional<IList<AdminDataflow>> dataflows = default;
            Optional<IList<Workbook>> workbooks = default;
            Optional<Guid> pipelineId = default;
            Optional<bool> hasWorkspaceLevelSettings = default;
            Guid id = default;
            Optional<string> name = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("isReadOnly"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isReadOnly = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isOnDedicatedCapacity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isOnDedicatedCapacity = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("capacityId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    capacityId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("dataflowStorageId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataflowStorageId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("defaultDatasetStorageFormat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultDatasetStorageFormat = new DefaultDatasetStorageFormat(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("logAnalyticsWorkspace"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    logAnalyticsWorkspace = AzureResource.DeserializeAzureResource(property.Value);
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = property.Value.GetString().ToGroupType();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    state = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("users"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<GroupUser> array = new List<GroupUser>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(GroupUser.DeserializeGroupUser(item));
                    }
                    users = array;
                    continue;
                }
                if (property.NameEquals("reports"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AdminReport> array = new List<AdminReport>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AdminReport.DeserializeAdminReport(item));
                    }
                    reports = array;
                    continue;
                }
                if (property.NameEquals("dashboards"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AdminDashboard> array = new List<AdminDashboard>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AdminDashboard.DeserializeAdminDashboard(item));
                    }
                    dashboards = array;
                    continue;
                }
                if (property.NameEquals("datasets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AdminDataset> array = new List<AdminDataset>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AdminDataset.DeserializeAdminDataset(item));
                    }
                    datasets = array;
                    continue;
                }
                if (property.NameEquals("dataflows"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AdminDataflow> array = new List<AdminDataflow>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AdminDataflow.DeserializeAdminDataflow(item));
                    }
                    dataflows = array;
                    continue;
                }
                if (property.NameEquals("workbooks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Workbook> array = new List<Workbook>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Workbook.DeserializeWorkbook(item));
                    }
                    workbooks = array;
                    continue;
                }
                if (property.NameEquals("pipelineId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pipelineId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("hasWorkspaceLevelSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hasWorkspaceLevelSettings = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
            }
            return new AdminGroup(id, name.Value, Optional.ToNullable(isReadOnly), Optional.ToNullable(isOnDedicatedCapacity), Optional.ToNullable(capacityId), Optional.ToNullable(dataflowStorageId), Optional.ToNullable(defaultDatasetStorageFormat), logAnalyticsWorkspace.Value, description.Value, Optional.ToNullable(type), state.Value, Optional.ToList(users), Optional.ToList(reports), Optional.ToList(dashboards), Optional.ToList(datasets), Optional.ToList(dataflows), Optional.ToList(workbooks), Optional.ToNullable(pipelineId), Optional.ToNullable(hasWorkspaceLevelSettings));
        }
    }
}
