// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class Goal : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id.Value);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(ScorecardId))
            {
                writer.WritePropertyName("scorecardId"u8);
                writer.WriteStringValue(ScorecardId.Value);
            }
            if (Optional.IsDefined(CreatedTime))
            {
                writer.WritePropertyName("createdTime"u8);
                writer.WriteStringValue(CreatedTime.Value, "O");
            }
            if (Optional.IsDefined(LastModifiedTime))
            {
                writer.WritePropertyName("lastModifiedTime"u8);
                writer.WriteStringValue(LastModifiedTime.Value, "O");
            }
            if (Optional.IsDefined(StartDate))
            {
                writer.WritePropertyName("startDate"u8);
                writer.WriteStringValue(StartDate.Value, "O");
            }
            if (Optional.IsDefined(CompletionDate))
            {
                writer.WritePropertyName("completionDate"u8);
                writer.WriteStringValue(CompletionDate.Value, "O");
            }
            if (Optional.IsDefined(ParentId))
            {
                writer.WritePropertyName("parentId"u8);
                writer.WriteStringValue(ParentId.Value);
            }
            if (Optional.IsDefined(NotesCount))
            {
                writer.WritePropertyName("notesCount"u8);
                writer.WriteNumberValue(NotesCount.Value);
            }
            if (Optional.IsDefined(ValuesFormatString))
            {
                writer.WritePropertyName("valuesFormatString"u8);
                writer.WriteStringValue(ValuesFormatString);
            }
            if (Optional.IsDefined(DatesFormatString))
            {
                writer.WritePropertyName("datesFormatString"u8);
                writer.WriteStringValue(DatesFormatString);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(HasStatusRules))
            {
                writer.WritePropertyName("hasStatusRules"u8);
                writer.WriteBooleanValue(HasStatusRules.Value);
            }
            if (Optional.IsDefined(StatusRules))
            {
                writer.WritePropertyName("statusRules"u8);
                writer.WriteObjectValue(StatusRules);
            }
            if (Optional.IsDefined(Permissions))
            {
                writer.WritePropertyName("permissions"u8);
                writer.WriteStringValue(Permissions.Value.ToSerialString());
            }
            if (Optional.IsDefined(Level))
            {
                writer.WritePropertyName("level"u8);
                writer.WriteNumberValue(Level.Value);
            }
            if (Optional.IsDefined(Rank))
            {
                writer.WritePropertyName("rank"u8);
                writer.WriteNumberValue(Rank.Value);
            }
            if (Optional.IsCollectionDefined(GoalValues))
            {
                writer.WritePropertyName("goalValues"u8);
                writer.WriteStartArray();
                foreach (var item in GoalValues)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Aggregations))
            {
                writer.WritePropertyName("aggregations"u8);
                writer.WriteStartArray();
                foreach (var item in Aggregations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static Goal DeserializeGoal(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<Guid> id = default;
            Optional<string> name = default;
            Optional<Guid> scorecardId = default;
            Optional<DateTimeOffset> createdTime = default;
            Optional<DateTimeOffset> lastModifiedTime = default;
            Optional<DateTimeOffset> startDate = default;
            Optional<DateTimeOffset> completionDate = default;
            Optional<Guid> parentId = default;
            Optional<int> notesCount = default;
            Optional<string> valuesFormatString = default;
            Optional<string> datesFormatString = default;
            Optional<string> description = default;
            Optional<bool> hasStatusRules = default;
            Optional<GoalsRulesGoalRulesContainer> statusRules = default;
            Optional<GoalPermissions> permissions = default;
            Optional<int> level = default;
            Optional<long> rank = default;
            Optional<IList<GoalValue>> goalValues = default;
            Optional<IList<GoalAggregation>> aggregations = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    id = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scorecardId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scorecardId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("createdTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastModifiedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastModifiedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("startDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("completionDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    completionDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("parentId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    parentId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("notesCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    notesCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("valuesFormatString"u8))
                {
                    valuesFormatString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("datesFormatString"u8))
                {
                    datesFormatString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hasStatusRules"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hasStatusRules = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("statusRules"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    statusRules = GoalsRulesGoalRulesContainer.DeserializeGoalsRulesGoalRulesContainer(property.Value);
                    continue;
                }
                if (property.NameEquals("permissions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    permissions = property.Value.GetString().ToGoalPermissions();
                    continue;
                }
                if (property.NameEquals("level"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    level = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("rank"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rank = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("goalValues"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<GoalValue> array = new List<GoalValue>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(GoalValue.DeserializeGoalValue(item));
                    }
                    goalValues = array;
                    continue;
                }
                if (property.NameEquals("aggregations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<GoalAggregation> array = new List<GoalAggregation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(GoalAggregation.DeserializeGoalAggregation(item));
                    }
                    aggregations = array;
                    continue;
                }
            }
            return new Goal(Optional.ToNullable(id), name.Value, Optional.ToNullable(scorecardId), Optional.ToNullable(createdTime), Optional.ToNullable(lastModifiedTime), Optional.ToNullable(startDate), Optional.ToNullable(completionDate), Optional.ToNullable(parentId), Optional.ToNullable(notesCount), valuesFormatString.Value, datesFormatString.Value, description.Value, Optional.ToNullable(hasStatusRules), statusRules.Value, Optional.ToNullable(permissions), Optional.ToNullable(level), Optional.ToNullable(rank), Optional.ToList(goalValues), Optional.ToList(aggregations));
        }
    }
}
