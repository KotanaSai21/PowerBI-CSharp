// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class WorkspaceInfo
    {
        internal static WorkspaceInfo DeserializeWorkspaceInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Guid id = default;
            Optional<string> name = default;
            Optional<string> description = default;
            Optional<string> type = default;
            Optional<string> state = default;
            Optional<string> dataRetrievalState = default;
            Optional<bool> isOnDedicatedCapacity = default;
            Optional<string> capacityId = default;
            Optional<DefaultDatasetStorageFormat> defaultDatasetStorageFormat = default;
            Optional<IReadOnlyList<WorkspaceInfoReport>> reports = default;
            Optional<IReadOnlyList<WorkspaceInfoDashboard>> dashboards = default;
            Optional<IReadOnlyList<WorkspaceInfoDataset>> datasets = default;
            Optional<IReadOnlyList<WorkspaceInfoDataflow>> dataflows = default;
            Optional<IReadOnlyList<WorkspaceInfoDatamart>> datamarts = default;
            Optional<IReadOnlyList<GroupUser>> users = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    state = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataRetrievalState"u8))
                {
                    dataRetrievalState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isOnDedicatedCapacity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isOnDedicatedCapacity = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("capacityId"u8))
                {
                    capacityId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("defaultDatasetStorageFormat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultDatasetStorageFormat = new DefaultDatasetStorageFormat(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("reports"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<WorkspaceInfoReport> array = new List<WorkspaceInfoReport>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(WorkspaceInfoReport.DeserializeWorkspaceInfoReport(item));
                    }
                    reports = array;
                    continue;
                }
                if (property.NameEquals("dashboards"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<WorkspaceInfoDashboard> array = new List<WorkspaceInfoDashboard>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(WorkspaceInfoDashboard.DeserializeWorkspaceInfoDashboard(item));
                    }
                    dashboards = array;
                    continue;
                }
                if (property.NameEquals("datasets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<WorkspaceInfoDataset> array = new List<WorkspaceInfoDataset>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(WorkspaceInfoDataset.DeserializeWorkspaceInfoDataset(item));
                    }
                    datasets = array;
                    continue;
                }
                if (property.NameEquals("dataflows"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<WorkspaceInfoDataflow> array = new List<WorkspaceInfoDataflow>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(WorkspaceInfoDataflow.DeserializeWorkspaceInfoDataflow(item));
                    }
                    dataflows = array;
                    continue;
                }
                if (property.NameEquals("datamarts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<WorkspaceInfoDatamart> array = new List<WorkspaceInfoDatamart>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(WorkspaceInfoDatamart.DeserializeWorkspaceInfoDatamart(item));
                    }
                    datamarts = array;
                    continue;
                }
                if (property.NameEquals("users"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<GroupUser> array = new List<GroupUser>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(GroupUser.DeserializeGroupUser(item));
                    }
                    users = array;
                    continue;
                }
            }
            return new WorkspaceInfo(id, name.Value, description.Value, type.Value, state.Value, dataRetrievalState.Value, Optional.ToNullable(isOnDedicatedCapacity), capacityId.Value, Optional.ToNullable(defaultDatasetStorageFormat), Optional.ToList(reports), Optional.ToList(dashboards), Optional.ToList(datasets), Optional.ToList(dataflows), Optional.ToList(datamarts), Optional.ToList(users));
        }
    }
}
