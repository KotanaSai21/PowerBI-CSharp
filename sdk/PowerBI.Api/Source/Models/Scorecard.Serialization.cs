// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class Scorecard : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id.Value);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(CreatedTime))
            {
                writer.WritePropertyName("createdTime"u8);
                writer.WriteStringValue(CreatedTime.Value, "O");
            }
            if (Optional.IsDefined(LastModifiedTime))
            {
                writer.WritePropertyName("lastModifiedTime"u8);
                writer.WriteStringValue(LastModifiedTime.Value, "O");
            }
            if (Optional.IsDefined(ProvisioningStatus))
            {
                writer.WritePropertyName("provisioningStatus"u8);
                writer.WriteStringValue(ProvisioningStatus.Value.ToString());
            }
            if (Optional.IsDefined(GroupId))
            {
                writer.WritePropertyName("groupId"u8);
                writer.WriteStringValue(GroupId.Value);
            }
            if (Optional.IsDefined(DatasetId))
            {
                writer.WritePropertyName("datasetId"u8);
                writer.WriteStringValue(DatasetId.Value);
            }
            if (Optional.IsDefined(ReportId))
            {
                writer.WritePropertyName("reportId"u8);
                writer.WriteStringValue(ReportId.Value);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Permissions))
            {
                writer.WritePropertyName("permissions"u8);
                writer.WriteStringValue(Permissions.Value.ToSerialString());
            }
            if (Optional.IsCollectionDefined(ColumnSettings))
            {
                writer.WritePropertyName("columnSettings"u8);
                writer.WriteStartArray();
                foreach (var item in ColumnSettings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Goals))
            {
                writer.WritePropertyName("goals"u8);
                writer.WriteStartArray();
                foreach (var item in Goals)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static Scorecard DeserializeScorecard(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<Guid> id = default;
            Optional<string> name = default;
            Optional<DateTimeOffset> createdTime = default;
            Optional<DateTimeOffset> lastModifiedTime = default;
            Optional<ScorecardProvisioningStatus> provisioningStatus = default;
            Optional<Guid> groupId = default;
            Optional<Guid> datasetId = default;
            Optional<Guid> reportId = default;
            Optional<string> description = default;
            Optional<ScorecardPermission> permissions = default;
            Optional<IList<ScorecardColumnSetting>> columnSettings = default;
            Optional<IList<Goal>> goals = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    id = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastModifiedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastModifiedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("provisioningStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningStatus = new ScorecardProvisioningStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("groupId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    groupId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("datasetId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    datasetId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("reportId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reportId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("permissions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    permissions = property.Value.GetString().ToScorecardPermission();
                    continue;
                }
                if (property.NameEquals("columnSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ScorecardColumnSetting> array = new List<ScorecardColumnSetting>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ScorecardColumnSetting.DeserializeScorecardColumnSetting(item));
                    }
                    columnSettings = array;
                    continue;
                }
                if (property.NameEquals("goals"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Goal> array = new List<Goal>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Goal.DeserializeGoal(item));
                    }
                    goals = array;
                    continue;
                }
            }
            return new Scorecard(Optional.ToNullable(id), name.Value, Optional.ToNullable(createdTime), Optional.ToNullable(lastModifiedTime), Optional.ToNullable(provisioningStatus), Optional.ToNullable(groupId), Optional.ToNullable(datasetId), Optional.ToNullable(reportId), description.Value, Optional.ToNullable(permissions), Optional.ToList(columnSettings), Optional.ToList(goals));
        }
    }
}
