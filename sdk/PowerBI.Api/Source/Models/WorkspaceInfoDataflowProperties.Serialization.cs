// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class WorkspaceInfoDataflowProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(DatasourceUsages))
            {
                writer.WritePropertyName("datasourceUsages"u8);
                writer.WriteStartArray();
                foreach (var item in DatasourceUsages)
                {
                    writer.WriteObjectValue<DatasourceUsage>(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MisconfiguredDatasourceUsages))
            {
                writer.WritePropertyName("misconfiguredDatasourceUsages"u8);
                writer.WriteStartArray();
                foreach (var item in MisconfiguredDatasourceUsages)
                {
                    writer.WriteObjectValue<DatasourceUsage>(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(UpstreamDataflows))
            {
                writer.WritePropertyName("upstreamDataflows"u8);
                writer.WriteStartArray();
                foreach (var item in UpstreamDataflows)
                {
                    writer.WriteObjectValue<DependentDataflow>(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(UpstreamDatamart))
            {
                writer.WritePropertyName("upstreamDatamart"u8);
                writer.WriteStartArray();
                foreach (var item in UpstreamDatamart)
                {
                    writer.WriteObjectValue<DependentDatamarts>(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static WorkspaceInfoDataflowProperties DeserializeWorkspaceInfoDataflowProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<DatasourceUsage> datasourceUsages = default;
            IList<DatasourceUsage> misconfiguredDatasourceUsages = default;
            IList<DependentDataflow> upstreamDataflows = default;
            IList<DependentDatamarts> upstreamDatamart = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("datasourceUsages"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DatasourceUsage> array = new List<DatasourceUsage>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DatasourceUsage.DeserializeDatasourceUsage(item));
                    }
                    datasourceUsages = array;
                    continue;
                }
                if (property.NameEquals("misconfiguredDatasourceUsages"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DatasourceUsage> array = new List<DatasourceUsage>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DatasourceUsage.DeserializeDatasourceUsage(item));
                    }
                    misconfiguredDatasourceUsages = array;
                    continue;
                }
                if (property.NameEquals("upstreamDataflows"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DependentDataflow> array = new List<DependentDataflow>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DependentDataflow.DeserializeDependentDataflow(item));
                    }
                    upstreamDataflows = array;
                    continue;
                }
                if (property.NameEquals("upstreamDatamart"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DependentDatamarts> array = new List<DependentDatamarts>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DependentDatamarts.DeserializeDependentDatamarts(item));
                    }
                    upstreamDatamart = array;
                    continue;
                }
            }
            return new WorkspaceInfoDataflowProperties(datasourceUsages ?? new ChangeTrackingList<DatasourceUsage>(), misconfiguredDatasourceUsages ?? new ChangeTrackingList<DatasourceUsage>(), upstreamDataflows ?? new ChangeTrackingList<DependentDataflow>(), upstreamDatamart ?? new ChangeTrackingList<DependentDatamarts>());
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static WorkspaceInfoDataflowProperties FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeWorkspaceInfoDataflowProperties(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue<WorkspaceInfoDataflowProperties>(this);
            return content;
        }
    }
}
