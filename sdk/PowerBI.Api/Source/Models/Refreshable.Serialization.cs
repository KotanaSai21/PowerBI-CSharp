// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class Refreshable
    {
        internal static Refreshable DeserializeRefreshable(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<RefreshableKind> kind = default;
            Optional<DateTimeOffset> startTime = default;
            Optional<DateTimeOffset> endTime = default;
            Optional<int> refreshCount = default;
            Optional<int> refreshFailures = default;
            Optional<float> averageDuration = default;
            Optional<float> medianDuration = default;
            Optional<int> refreshesPerDay = default;
            Optional<Refresh> lastRefresh = default;
            Optional<RefreshSchedule> refreshSchedule = default;
            Optional<IReadOnlyList<string>> configuredBy = default;
            Optional<Capacity> capacity = default;
            Optional<RefreshableGroup> group = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kind = new RefreshableKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("startTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("refreshCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    refreshCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("refreshFailures"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    refreshFailures = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("averageDuration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    averageDuration = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("medianDuration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    medianDuration = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("refreshesPerDay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    refreshesPerDay = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("lastRefresh"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastRefresh = Refresh.DeserializeRefresh(property.Value);
                    continue;
                }
                if (property.NameEquals("refreshSchedule"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    refreshSchedule = RefreshSchedule.DeserializeRefreshSchedule(property.Value);
                    continue;
                }
                if (property.NameEquals("configuredBy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    configuredBy = array;
                    continue;
                }
                if (property.NameEquals("capacity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    capacity = Capacity.DeserializeCapacity(property.Value);
                    continue;
                }
                if (property.NameEquals("group"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    group = RefreshableGroup.DeserializeRefreshableGroup(property.Value);
                    continue;
                }
            }
            return new Refreshable(id.Value, name.Value, Optional.ToNullable(kind), Optional.ToNullable(startTime), Optional.ToNullable(endTime), Optional.ToNullable(refreshCount), Optional.ToNullable(refreshFailures), Optional.ToNullable(averageDuration), Optional.ToNullable(medianDuration), Optional.ToNullable(refreshesPerDay), lastRefresh.Value, refreshSchedule.Value, Optional.ToList(configuredBy), capacity.Value, group.Value);
        }
    }
}
